{
  "taskId": "5.2",
  "title": "Citation Validation and Parsing",
  "phase": "5",
  "phaseTitle": "Citation Tools",
  "taskNumber": 2,
  "totalTasksInPhase": 3,
  "complexity": "complex",
  "objective": "Implement citation format verification using CiteUrl.NET library",

  "contextManagement": {
    "isFirstInPhase": false,
    "isLastInPhase": false,
    "requiresContextLoad": false,
    "phaseBoundaryInstructions": null
  },

  "codebaseVerificationEvidence": {
    "verifiedFiles": [
      ".featurePlans/courtListnerMCP/CourtListnerMCPServer.md (lines 361-387)"
    ],
    "verifiedMethods": [],
    "assumptionAudit": {
      "assumptionLanguageDetected": false,
      "assumptionCount": 0,
      "confidence": "HIGH",
      "notes": "All specifications verified from plan document. **DEPENDENCY**: CiteUrl.NET library must be available."
    }
  },

  "agentInstructions": "**OBJECTIVE**: Implement citation validation and parsing tools using CiteUrl.NET library.\n\n**CRITICAL DEPENDENCY**: This task requires CiteUrl.NET library to be available.\n- **Package**: CiteUrl.Core NuGet package\n- **Location**: C:\\Users\\tlewers\\source\\repos\\citeurl-dotnet\\\n- **Status**: Being developed in parallel (GAP #7 resolution)\n- **If unavailable**: Mark task as blocked, create stub implementations with TODO comments\n\n**PREREQUISITES**:\n- Task 5.1 completed (CitationTools.cs exists)\n- CiteUrl.NET library available as NuGet package or project reference\n- Navigate to `CourtListener.MCP.Server/Tools/CitationTools.cs`\n\n**EXECUTION STEPS**:\n\n1. **Add CiteUrl.NET Reference**:\n   - Option A: If published to NuGet:\n     ```bash\n     dotnet add package CiteUrl.Core\n     ```\n   - Option B: If local project:\n     ```bash\n     dotnet add reference ../../citeurl-dotnet/src/CiteUrl.Core/CiteUrl.Core.csproj\n     ```\n   - Option C: If unavailable:\n     - Skip package installation\n     - Create stub implementations with `throw new NotImplementedException(\"CiteUrl.NET library not available\")`\n     - Add TODO comments\n\n2. **Add Using Statement** (if CiteUrl.NET available):\n   ```csharp\n   using CiteUrl;\n   ```\n\n3. **Implement VerifyCitationFormat Method** (if CiteUrl.NET available):\n   - Add to CitationTools.cs\n   - Method signature:\n     ```csharp\n     [McpServerTool]\n     [Description(\"Verify citation format using CiteUrl.NET template system\")]\n     public async Task<object> VerifyCitationFormat(\n         [Description(\"Citation to verify\")] string citation,\n         CancellationToken cancellationToken = default\n     )\n     ```\n   - Input validation:\n     ```csharp\n     if (string.IsNullOrWhiteSpace(citation))\n     {\n         return new ToolError(\n             ErrorTypes.ValidationError,\n             \"Citation cannot be empty\"\n         );\n     }\n     ```\n   - Use CiteUrl.NET Template system:\n     ```csharp\n     try\n     {\n         // Use CiteUrl.NET validation\n         var template = Template.FindMatchingTemplate(citation);\n         \n         if (template != null)\n         {\n             return new\n             {\n                 IsValid = true,\n                 Citation = citation,\n                 Format = template.Name,\n                 Source = template.Source\n             };\n         }\n         else\n         {\n             return new\n             {\n                 IsValid = false,\n                 Citation = citation,\n                 Message = \"No matching citation format found\"\n             };\n         }\n     }\n     catch (Exception ex)\n     {\n         _logger.LogError(ex, \"Error verifying citation format: {Citation}\", citation);\n         return new ToolError(\n             ErrorTypes.ApiError,\n             $\"Validation error: {ex.Message}\"\n         );\n     }\n     ```\n   - Return validation results with recognized format\n   - Support 130+ legal source types (CiteUrl.NET capability)\n\n4. **Implement ParseCitation Method** (if CiteUrl.NET available):\n   - Add to CitationTools.cs\n   - Method signature:\n     ```csharp\n     [McpServerTool]\n     [Description(\"Parse citation into structured components using CiteUrl.NET\")]\n     public async Task<object> ParseCitation(\n         [Description(\"Citation to parse\")] string citation,\n         CancellationToken cancellationToken = default\n     )\n     ```\n   - Input validation (same as above)\n   - Use CiteUrl.NET Citator.cite() method:\n     ```csharp\n     try\n     {\n         var citator = new Citator();\n         var parsed = citator.Cite(citation);\n         \n         if (parsed != null)\n         {\n             return new\n             {\n                 Citation = citation,\n                 Volume = parsed.Volume,\n                 Reporter = parsed.Reporter,\n                 Page = parsed.Page,\n                 Pincite = parsed.Pincite,\n                 Court = parsed.Court,\n                 Year = parsed.Year\n             };\n         }\n         else\n         {\n             return new ToolError(\n                 ErrorTypes.ValidationError,\n                 \"Could not parse citation\",\n                 \"Citation format may be invalid or unsupported\"\n             );\n         }\n     }\n     catch (Exception ex)\n     {\n         _logger.LogError(ex, \"Error parsing citation: {Citation}\", citation);\n         return new ToolError(\n             ErrorTypes.ApiError,\n             $\"Parse error: {ex.Message}\"\n         );\n     }\n     ```\n   - Parse into components: volume, reporter, page, pincite\n   - Return structured citation information\n\n5. **Stub Implementation** (if CiteUrl.NET NOT available):\n   ```csharp\n   [McpServerTool]\n   [Description(\"Verify citation format using CiteUrl.NET template system (STUB - CiteUrl.NET not available)\")]\n   public Task<object> VerifyCitationFormat(\n       [Description(\"Citation to verify\")] string citation,\n       CancellationToken cancellationToken = default\n   )\n   {\n       // TODO: Implement when CiteUrl.NET library is available\n       return Task.FromResult<object>(new ToolError(\n           ErrorTypes.ApiError,\n           \"CiteUrl.NET library not available\",\n           \"This feature requires the CiteUrl.NET library to be installed\"\n       ));\n   }\n   \n   [McpServerTool]\n   [Description(\"Parse citation into structured components using CiteUrl.NET (STUB - CiteUrl.NET not available)\")]\n   public Task<object> ParseCitation(\n       [Description(\"Citation to parse\")] string citation,\n       CancellationToken cancellationToken = default\n   )\n   {\n       // TODO: Implement when CiteUrl.NET library is available\n       return Task.FromResult<object>(new ToolError(\n           ErrorTypes.ApiError,\n           \"CiteUrl.NET library not available\",\n           \"This feature requires the CiteUrl.NET library to be installed\"\n       ));\n   }\n   ```\n\n6. **Structured Logging**:\n   - Log validation attempts\n   - Log parse attempts\n   - Log success with recognized format/components\n   - Log errors with citation context\n\n7. **Verify Implementation**:\n   - Run: `dotnet build`\n   - If CiteUrl.NET available:\n     - Verify: Methods use CiteUrl.NET types\n     - Verify: Template matching works\n     - Verify: Citation parsing returns components\n   - If CiteUrl.NET NOT available:\n     - Verify: Stub implementations compile\n     - Verify: Stubs return appropriate error messages\n     - Verify: TODO comments present\n\n**DELIVERABLES**:\n- CiteUrl.Core package reference (if available)\n- `VerifyCitationFormat` method (full or stub)\n- `ParseCitation` method (full or stub)\n- Validation with 130+ legal source types (if CiteUrl.NET available)\n- Structured citation parsing (if CiteUrl.NET available)\n- Error handling and logging\n\n**VERIFICATION CHECKLIST**:\n- [ ] CiteUrl.Core package added (or marked as unavailable)\n- [ ] VerifyCitationFormat method added to CitationTools.cs\n- [ ] ParseCitation method added to CitationTools.cs\n- [ ] Both methods have [McpServerTool] attribute\n- [ ] Both methods have [Description] attributes\n- [ ] Input validation (citation not empty)\n- [ ] If CiteUrl.NET available:\n  - [ ] Template matching implemented\n  - [ ] Citation parsing implemented\n  - [ ] Returns format name and source\n  - [ ] Returns volume, reporter, page, pincite\n- [ ] If CiteUrl.NET NOT available:\n  - [ ] Stub implementations return ToolError\n  - [ ] Error message indicates library unavailable\n  - [ ] TODO comments present\n- [ ] Structured logging with citation context\n- [ ] Project builds successfully",

  "successCriteria": [
    "Citation format validation working with CiteUrl.NET capabilities (or stub if unavailable)",
    "All legal citation patterns recognized (130+ sources) if CiteUrl.NET available",
    "Citation parsing returns structured components if CiteUrl.NET available",
    "Graceful fallback if CiteUrl.NET unavailable (stubs with error messages)"
  ],

  "criticalAnchors": [
    "MUST use CiteUrl.Core library (separate project - GAP #7)",
    "DEPENDENCY: CiteUrl.NET must be available (C:\\Users\\tlewers\\source\\repos\\citeurl-dotnet\\)",
    "If unavailable: MUST create stub implementations with TODO comments",
    "MUST match Python citeurl validation behavior exactly (if library available)",
    "Full Bluebook-style citation support (if library available)",
    "Tool names MUST be PascalCase: VerifyCitationFormat, ParseCitation",
    "MUST return ToolError for unavailable library (not throw exceptions)"
  ],

  "associatedArtifacts": [
    {
      "type": "method",
      "path": "CourtListener.MCP.Server/Tools/CitationTools.cs",
      "description": "VerifyCitationFormat method (full or stub)"
    },
    {
      "type": "method",
      "path": "CourtListener.MCP.Server/Tools/CitationTools.cs",
      "description": "ParseCitation method (full or stub)"
    },
    {
      "type": "dependency",
      "path": "CiteUrl.Core NuGet package or project reference",
      "description": "Citation parsing library (may not be available yet)"
    }
  },

  "executionControls": {
    "estimatedDuration": "20-30 minutes (if CiteUrl.NET available), 5-10 minutes (stubs only)",
    "requiresUserInput": false,
    "canRunOffline": true,
    "requiresExternalServices": false,
    "prerequisiteTasks": ["5.1"],
    "blockedBy": ["CiteUrl.NET library availability"],
    "pauseBeforeExecution": false,
    "pauseAfterExecution": false
  },

  "gapDecisionReferences": [
    {
      "gapId": "GAP #7",
      "gapTitle": "Citation Parsing Strategy",
      "decision": "Port Python citeurl to .NET as CiteUrl.NET",
      "implementation": "Separate project at C:\\Users\\tlewers\\source\\repos\\citeurl-dotnet\\; this task depends on its availability"
    }
  ],

  "metadata": {
    "generatedAt": "2025-10-06T19:05:00Z",
    "generatedBy": "L.E.A.S.H. Ingestion v3.2.0-git",
    "planSource": ".featurePlans/courtListnerMCP/CourtListnerMCPServer.md",
    "confidenceLevel": "HIGH"
  }
}
