{
  "taskId": "4.1",
  "title": "Get Entity Tools",
  "phase": "4",
  "phaseTitle": "Entity Retrieval Tools",
  "taskNumber": 1,
  "totalTasksInPhase": 1,
  "complexity": "moderate",
  "objective": "Implement direct entity retrieval by ID for all 6 entity types",

  "contextManagement": {
    "isFirstInPhase": true,
    "isLastInPhase": true,
    "requiresContextLoad": true,
    "loadContextFrom": "ingestion_phaseBoundary_phase3_20251006.md",
    "phaseBoundaryInstructions": "MANDATORY: After completing this task, create Phase 4 boundary summary and PAUSE for user approval before Phase 5"
  },

  "codebaseVerificationEvidence": {
    "verifiedFiles": [
      ".featurePlans/courtListnerMCP/CourtListnerMCPServer.md (lines 300-328)"
    ],
    "verifiedMethods": [],
    "assumptionAudit": {
      "assumptionLanguageDetected": false,
      "assumptionCount": 0,
      "confidence": "HIGH",
      "notes": "All specifications verified from plan document. Follows SearchTools pattern."
    }
  },

  "agentInstructions": "**OBJECTIVE**: Implement 6 MCP tools for direct entity retrieval by ID, following the established SearchTools pattern.\n\n**CRITICAL CONTEXT**: These tools use GET requests to entity-specific endpoints. Pattern is simpler than search tools (no query params, just ID).\n\n**PREREQUISITES**:\n- Phase 3 completed (SearchTools pattern established)\n- Entity models exist (Opinion, Docket, Audio, Cluster, Person, Court)\n- Navigate to `CourtListener.MCP.Server/Tools/` directory\n\n**EXECUTION STEPS**:\n\n1. **Create GetTools Class**:\n   - Create file: `Tools/GetTools.cs`\n   - Add class attribute: `[McpServerToolType]`\n   - Inject dependencies: `ICourtListenerClient`, `ILogger<GetTools>`\n   - Constructor with dependency injection\n   - Namespace: `CourtListener.MCP.Server.Tools`\n\n2. **Implement GetOpinion Method**:\n   - Method signature:\n     ```csharp\n     [McpServerTool]\n     [Description(\"Get a specific opinion by ID\")]\n     public async Task<object> GetOpinion(\n         [Description(\"Opinion ID\")] string opinionId,\n         CancellationToken cancellationToken = default\n     )\n     ```\n   - Input validation:\n     ```csharp\n     if (string.IsNullOrWhiteSpace(opinionId))\n     {\n         return new ToolError(\n             ErrorTypes.ValidationError,\n             \"Opinion ID cannot be empty\"\n         );\n     }\n     ```\n   - Endpoint: `/opinions/{opinionId}/`\n   - Call: `_client.GetAsync<Opinion>($\"/opinions/{opinionId}/\", cancellationToken)`\n   - Error handling:\n     - null result → NotFound: \"Opinion not found with ID: {opinionId}\"\n     - 401 → Unauthorized with config suggestion\n     - 429 → RateLimited\n     - General → ApiError with logging\n\n3. **Implement GetDocket Method**:\n   - Method signature:\n     ```csharp\n     [McpServerTool]\n     [Description(\"Get a specific docket by ID\")]\n     public async Task<object> GetDocket(\n         [Description(\"Docket ID\")] string docketId,\n         CancellationToken cancellationToken = default\n     )\n     ```\n   - Endpoint: `/dockets/{docketId}/`\n   - Same validation and error handling pattern\n   - Return: Docket or ToolError\n\n4. **Implement GetAudio Method**:\n   - Method signature:\n     ```csharp\n     [McpServerTool]\n     [Description(\"Get a specific oral argument audio recording by ID\")]\n     public async Task<object> GetAudio(\n         [Description(\"Audio ID\")] string audioId,\n         CancellationToken cancellationToken = default\n     )\n     ```\n   - Endpoint: `/audio/{audioId}/`\n   - Same validation and error handling pattern\n   - Return: Audio or ToolError\n\n5. **Implement GetCluster Method**:\n   - Method signature:\n     ```csharp\n     [McpServerTool]\n     [Description(\"Get a specific opinion cluster by ID\")]\n     public async Task<object> GetCluster(\n         [Description(\"Cluster ID\")] string clusterId,\n         CancellationToken cancellationToken = default\n     )\n     ```\n   - Endpoint: `/clusters/{clusterId}/`\n   - Same validation and error handling pattern\n   - Return: Cluster or ToolError\n\n6. **Implement GetPerson Method**:\n   - Method signature:\n     ```csharp\n     [McpServerTool]\n     [Description(\"Get a specific judge or legal professional by ID\")]\n     public async Task<object> GetPerson(\n         [Description(\"Person ID\")] string personId,\n         CancellationToken cancellationToken = default\n     )\n     ```\n   - Endpoint: `/people/{personId}/`\n   - Same validation and error handling pattern\n   - Return: Person or ToolError\n\n7. **Implement GetCourt Method**:\n   - Method signature:\n     ```csharp\n     [McpServerTool]\n     [Description(\"Get court information by court ID\")]\n     public async Task<object> GetCourt(\n         [Description(\"Court ID (e.g., 'scotus', 'ca9')\")] string courtId,\n         CancellationToken cancellationToken = default\n     )\n     ```\n   - Endpoint: `/courts/{courtId}/`\n   - Same validation and error handling pattern\n   - Return: Court or ToolError\n\n8. **Structured Logging for All Methods**:\n   - Log request:\n     ```csharp\n     _logger.LogInformation(\n         \"Getting {EntityType} with ID: {Id}\",\n         \"Opinion\", opinionId\n     );\n     ```\n   - Log success:\n     ```csharp\n     _logger.LogInformation(\n         \"Found {EntityType} with ID: {Id}\",\n         \"Opinion\", opinionId\n     );\n     ```\n   - Log not found (as warning, not error):\n     ```csharp\n     _logger.LogWarning(\n         \"{EntityType} not found with ID: {Id}\",\n         \"Opinion\", opinionId\n     );\n     ```\n   - Log errors with context\n\n9. **Error Handling Pattern** (all methods):\n   ```csharp\n   try\n   {\n       var result = await _client.GetAsync<EntityType>($\"/endpoint/{id}/\", cancellationToken);\n       \n       if (result == null)\n       {\n           _logger.LogWarning(\"{EntityType} not found with ID: {Id}\", \"EntityType\", id);\n           return new ToolError(\n               ErrorTypes.NotFound,\n               $\"{EntityType} not found with ID: {id}\",\n               \"Check if the ID is correct\"\n           );\n       }\n       \n       _logger.LogInformation(\"Found {EntityType} with ID: {Id}\", \"EntityType\", id);\n       return result;\n   }\n   catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.Unauthorized)\n   {\n       return new ToolError(\n           ErrorTypes.Unauthorized,\n           \"Invalid API key\",\n           \"Check COURTLISTENER_API_KEY configuration\"\n       );\n   }\n   catch (HttpRequestException ex) when (ex.StatusCode == (HttpStatusCode)429)\n   {\n       return new ToolError(\n           ErrorTypes.RateLimited,\n           \"Rate limit exceeded\",\n           \"Retry after 60 seconds\"\n       );\n   }\n   catch (Exception ex)\n   {\n       _logger.LogError(ex, \"API error getting {EntityType} with ID: {Id}\", \"EntityType\", id);\n       return new ToolError(\n           ErrorTypes.ApiError,\n           $\"API error: {ex.Message}\",\n           \"Check logs for details\"\n       );\n   }\n   ```\n\n10. **Verify Implementation**:\n   - Run: `dotnet build`\n   - Verify: GetTools.cs class created with [McpServerToolType]\n   - Verify: All 6 methods have [McpServerTool] attribute\n   - Verify: All 6 methods have [Description] attributes\n   - Verify: All parameters have [Description] attributes\n   - Verify: Tool names are PascalCase: GetOpinion, GetDocket, GetAudio, GetCluster, GetPerson, GetCourt\n   - Verify: ID validation implemented\n   - Verify: 404 handling (null result → NotFound error)\n   - Verify: Structured logging for all operations\n\n**DELIVERABLES**:\n- `Tools/GetTools.cs` with [McpServerToolType] attribute\n- 6 get methods: GetOpinion, GetDocket, GetAudio, GetCluster, GetPerson, GetCourt\n- Input validation (ID not empty) for all methods\n- Error handling (404, 401, 429, general) for all methods\n- Structured logging for all operations\n\n**VERIFICATION CHECKLIST**:\n- [ ] GetTools.cs class created with [McpServerToolType]\n- [ ] All 6 methods have [McpServerTool] attribute\n- [ ] All 6 methods have [Description] attributes\n- [ ] All parameters have [Description] attributes\n- [ ] Tool names (PascalCase):\n  - [ ] GetOpinion\n  - [ ] GetDocket\n  - [ ] GetAudio\n  - [ ] GetCluster\n  - [ ] GetPerson\n  - [ ] GetCourt\n- [ ] Endpoints:\n  - [ ] GetOpinion: /opinions/{id}/\n  - [ ] GetDocket: /dockets/{id}/\n  - [ ] GetAudio: /audio/{id}/\n  - [ ] GetCluster: /clusters/{id}/\n  - [ ] GetPerson: /people/{id}/\n  - [ ] GetCourt: /courts/{id}/\n- [ ] ID validation (not empty) for all methods\n- [ ] 404 handling (null → NotFound error)\n- [ ] 401 handling (Unauthorized with suggestion)\n- [ ] 429 handling (RateLimited with retry guidance)\n- [ ] General error handling (ApiError with logging)\n- [ ] Structured logging (request, success, not found, errors)\n- [ ] Return type: object (entity or ToolError)\n- [ ] Project builds successfully",

  "successCriteria": [
    "All 6 entity types retrievable by ID",
    "Proper error handling for not found (404)",
    "Response models correctly deserialized",
    "Structured logging confirms successful retrievals",
    "Tool names follow PascalCase convention",
    "Error responses are ToolError objects (not exceptions)"
  ],

  "criticalAnchors": [
    "MUST use GET requests to entity-specific endpoints",
    "ID MUST be string type (match Python)",
    "Return detailed entity information (full model)",
    "Tool names MUST be PascalCase: GetOpinion, GetDocket, etc.",
    "MUST validate ID not empty before API call",
    "MUST handle 404 gracefully (null → NotFound ToolError)",
    "MUST use structured logging with entity type and ID",
    "Endpoints: /opinions/{id}/, /dockets/{id}/, /audio/{id}/, /clusters/{id}/, /people/{id}/, /courts/{id}/",
    "Return type: object (can be entity model or ToolError)"
  ],

  "associatedArtifacts": [
    {
      "type": "class",
      "path": "CourtListener.MCP.Server/Tools/GetTools.cs",
      "description": "MCP get tools class with 6 entity retrieval methods"
    }
  ],

  "executionControls": {
    "estimatedDuration": "25-35 minutes",
    "requiresUserInput": false,
    "canRunOffline": true,
    "requiresExternalServices": false,
    "prerequisiteTasks": ["2.1", "2.2", "3.1"],
    "blockedBy": [],
    "pauseBeforeExecution": false,
    "pauseAfterExecution": true,
    "pauseReason": "PHASE BOUNDARY - Phase 4 complete, create boundary summary and await user approval for Phase 5"
  },

  "metadata": {
    "generatedAt": "2025-10-06T18:55:00Z",
    "generatedBy": "L.E.A.S.H. Ingestion v3.2.0-git",
    "planSource": ".featurePlans/courtListnerMCP/CourtListnerMCPServer.md",
    "confidenceLevel": "HIGH"
  }
}
