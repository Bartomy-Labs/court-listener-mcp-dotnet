{
  "taskId": "3.3",
  "title": "Additional Search Tools",
  "phase": "3",
  "phaseTitle": "Search Tools Implementation",
  "taskNumber": 3,
  "totalTasksInPhase": 3,
  "complexity": "moderate",
  "objective": "Implement RECAP documents, audio, and people search tools completing all search functionality",

  "contextManagement": {
    "isFirstInPhase": false,
    "isLastInPhase": true,
    "requiresContextLoad": false,
    "phaseBoundaryInstructions": "MANDATORY: After completing this task, create Phase 3 boundary summary and PAUSE for user approval before Phase 4"
  },

  "codebaseVerificationEvidence": {
    "verifiedFiles": [
      ".featurePlans/courtListnerMCP/CourtListnerMCPServer.md (lines 273-298)"
    ],
    "verifiedMethods": [],
    "assumptionAudit": {
      "assumptionLanguageDetected": false,
      "assumptionCount": 0,
      "confidence": "HIGH",
      "notes": "All specifications verified from plan document. Follows established SearchTools pattern."
    }
  },

  "agentInstructions": "**OBJECTIVE**: Implement the remaining three search tools (RECAP documents, audio, people) following the established pattern.\n\n**CRITICAL CONTEXT**: These tools complete the search functionality, following the same pattern as previous search tools.\n\n**PREREQUISITES**:\n- Tasks 3.1 and 3.2 completed (SearchTools.cs has established pattern)\n- Navigate to `CourtListener.MCP.Server/Tools/SearchTools.cs`\n\n**EXECUTION STEPS**:\n\n1. **Create RecapDocument Entity Model First** (if not in Phase 2):\n   - Create file: `Models/Entities/RecapDocument.cs`\n   - Properties:\n     ```csharp\n     public class RecapDocument\n     {\n         public string? Id { get; set; }\n         public string? AbsoluteUrl { get; set; }\n         public string? Docket { get; set; }\n         public string? Court { get; set; }\n         public string? DocumentNumber { get; set; }\n         public string? AttachmentNumber { get; set; }\n         public string? Description { get; set; }\n         public DateTimeOffset? DateFiled { get; set; }\n         public int? PageCount { get; set; }\n         public string? FilePath { get; set; }\n         public bool? IsAvailable { get; set; }\n     }\n     ```\n   - Create: `Models/Search/RecapDocumentSearchResult.cs` as `SearchResultBase<RecapDocument>`\n\n2. **Implement SearchRecapDocuments Method**:\n   - Add to `SearchTools.cs`\n   - Method signature:\n     ```csharp\n     [McpServerTool]\n     [Description(\"Search RECAP filing documents from federal court dockets\")]\n     public async Task<object> SearchRecapDocuments(\n         [Description(\"Search query text\")] string query,\n         [Description(\"Court identifier\")] string? court = null,\n         [Description(\"Case name to search for\")] string? caseName = null,\n         [Description(\"Docket number\")] string? docketNumber = null,\n         [Description(\"Document number\")] string? documentNumber = null,\n         [Description(\"Attachment number\")] string? attachmentNumber = null,\n         [Description(\"Filed after date (YYYY-MM-DD)\")] string? dateFiledAfter = null,\n         [Description(\"Filed before date (YYYY-MM-DD)\")] string? dateFiledBefore = null,\n         [Description(\"Sort order field\")] string? orderBy = null,\n         [Description(\"Maximum results to return\")] int limit = 20,\n         CancellationToken cancellationToken = default\n     )\n     ```\n   - Search type: `type=rd`\n   - Additional parameters: `documentNumber`, `attachmentNumber`\n   - Same validation, error handling, logging pattern\n\n3. **Implement SearchAudio Method**:\n   - Add to `SearchTools.cs`\n   - Method signature:\n     ```csharp\n     [McpServerTool]\n     [Description(\"Search oral argument audio recordings from appellate courts\")]\n     public async Task<object> SearchAudio(\n         [Description(\"Search query text\")] string query,\n         [Description(\"Court identifier\")] string? court = null,\n         [Description(\"Case name to search for\")] string? caseName = null,\n         [Description(\"Judge name to filter by\")] string? judge = null,\n         [Description(\"Argued after date (YYYY-MM-DD)\")] string? arguedAfter = null,\n         [Description(\"Argued before date (YYYY-MM-DD)\")] string? arguedBefore = null,\n         [Description(\"Sort order field\")] string? orderBy = null,\n         [Description(\"Maximum results to return\")] int limit = 20,\n         CancellationToken cancellationToken = default\n     )\n     ```\n   - Search type: `type=oa` (oral arguments)\n   - Special parameters: `arguedAfter`, `arguedBefore` (instead of filed dates)\n   - Map to API: `argued_after`, `argued_before`\n   - Same validation, error handling, logging pattern\n   - Return: AudioSearchResult\n\n4. **Implement SearchPeople Method**:\n   - Add to `SearchTools.cs`\n   - Method signature:\n     ```csharp\n     [McpServerTool]\n     [Description(\"Search judges and legal professionals in the CourtListener database\")]\n     public async Task<object> SearchPeople(\n         [Description(\"Search query text (name)\")] string query,\n         [Description(\"Position type (e.g., judge, clerk)\")] string? positionType = null,\n         [Description(\"Political affiliation\")] string? politicalAffiliation = null,\n         [Description(\"School attended\")] string? school = null,\n         [Description(\"Appointed by (president name)\")] string? appointedBy = null,\n         [Description(\"Selection method (e.g., appointed, elected)\")] string? selectionMethod = null,\n         [Description(\"Sort order field\")] string? orderBy = null,\n         [Description(\"Maximum results to return\")] int limit = 20,\n         CancellationToken cancellationToken = default\n     )\n     ```\n   - Search type: `type=p` (people)\n   - Unique parameters: `positionType`, `politicalAffiliation`, `school`, `appointedBy`, `selectionMethod`\n   - Map to API (will auto-convert to snake_case):\n     - `position_type`, `political_affiliation`, `appointed_by`, `selection_method`\n   - Same validation, error handling, logging pattern\n   - Return: PersonSearchResult\n\n5. **Input Validation for All Three Methods**:\n   - Query not empty\n   - Limit 1-100 range\n   - Date formats (YYYY-MM-DD) if provided\n   - Return ValidationError for invalid input\n\n6. **Error Handling for All Three Methods**:\n   - Same pattern as SearchOpinions:\n     - 404 → NotFound\n     - 401 → Unauthorized with config suggestion\n     - 429 → RateLimited with retry guidance\n     - Validation → ValidationError before API call\n     - General → ApiError with logging\n\n7. **Structured Logging for All Three Methods**:\n   - Log request with tool name, query, limit\n   - Log success with result count\n   - Log errors with full context\n\n8. **Verify Implementation**:\n   - Run: `dotnet build`\n   - Verify: All 3 new methods added to SearchTools.cs\n   - Verify: RecapDocument entity model exists\n   - Verify: All search types correct (rd, oa, p)\n   - Verify: All parameters have [Description] attributes\n   - Verify: Input validation implemented\n   - Verify: Error handling matches pattern\n   - Verify: Structured logging present\n\n**DELIVERABLES**:\n- RecapDocument entity model (if not created in Phase 2)\n- RecapDocumentSearchResult model\n- `SearchRecapDocuments` method (type=rd)\n- `SearchAudio` method (type=oa)\n- `SearchPeople` method (type=p)\n- All tools follow established pattern (validation, errors, logging)\n\n**VERIFICATION CHECKLIST**:\n- [ ] RecapDocument entity model exists\n- [ ] RecapDocumentSearchResult model exists\n- [ ] SearchRecapDocuments method added with [McpServerTool]\n- [ ] SearchAudio method added with [McpServerTool]\n- [ ] SearchPeople method added with [McpServerTool]\n- [ ] All methods have [Description] attributes\n- [ ] All parameters have [Description] attributes\n- [ ] SearchRecapDocuments uses type: `type=rd`\n- [ ] SearchAudio uses type: `type=oa`\n- [ ] SearchPeople uses type: `type=p`\n- [ ] SearchRecapDocuments has documentNumber, attachmentNumber params\n- [ ] SearchAudio has arguedAfter, arguedBefore params\n- [ ] SearchPeople has positionType, politicalAffiliation, etc. params\n- [ ] Input validation: query, limit, dates\n- [ ] Error handling: 404, 401, 429, validation, general\n- [ ] Structured logging for all tools\n- [ ] Return type: object (result or ToolError)\n- [ ] Project builds successfully\n- [ ] Total search tools: 6 (Opinions, Dockets, DocketsWithDocs, RECAP, Audio, People)",

  "successCriteria": [
    "All search tools functional and following established pattern",
    "Type-specific parameters properly handled (documentNumber, arguedAfter, positionType, etc.)",
    "Results match Python implementation behavior",
    "All 6 search tools created: SearchOpinions, SearchDockets, SearchDocketsWithDocuments, SearchRecapDocuments, SearchAudio, SearchPeople",
    "Consistent error handling and logging across all tools"
  ],

  "criticalAnchors": [
    "RECAP documents MUST use: `type=rd`",
    "Audio MUST use: `type=oa` (oral arguments)",
    "People MUST use: `type=p`",
    "Tool names MUST be PascalCase (GAP #5)",
    "Parameters MUST use camelCase C# naming (serialize to snake_case)",
    "MUST validate input before API call",
    "MUST return ToolError objects for errors (not exceptions)",
    "MUST follow exact same pattern as SearchOpinions (consistency)",
    "SearchAudio uses arguedAfter/arguedBefore (not filed dates)",
    "SearchPeople has unique params: positionType, politicalAffiliation, appointedBy, selectionMethod"
  ],

  "associatedArtifacts": [
    {
      "type": "class",
      "path": "CourtListener.MCP.Server/Models/Entities/RecapDocument.cs",
      "description": "RECAP document entity model"
    },
    {
      "type": "class",
      "path": "CourtListener.MCP.Server/Models/Search/RecapDocumentSearchResult.cs",
      "description": "RECAP document search result model"
    },
    {
      "type": "method",
      "path": "CourtListener.MCP.Server/Tools/SearchTools.cs",
      "description": "SearchRecapDocuments method (type=rd)"
    },
    {
      "type": "method",
      "path": "CourtListener.MCP.Server/Tools/SearchTools.cs",
      "description": "SearchAudio method (type=oa)"
    },
    {
      "type": "method",
      "path": "CourtListener.MCP.Server/Tools/SearchTools.cs",
      "description": "SearchPeople method (type=p)"
    }
  ],

  "executionControls": {
    "estimatedDuration": "30-40 minutes",
    "requiresUserInput": false,
    "canRunOffline": true,
    "requiresExternalServices": false,
    "prerequisiteTasks": ["3.1", "3.2"],
    "blockedBy": [],
    "pauseBeforeExecution": false,
    "pauseAfterExecution": true,
    "pauseReason": "PHASE BOUNDARY - Phase 3 complete, create boundary summary and await user approval for Phase 4"
  },

  "metadata": {
    "generatedAt": "2025-10-06T18:50:00Z",
    "generatedBy": "L.E.A.S.H. Ingestion v3.2.0-git",
    "planSource": ".featurePlans/courtListnerMCP/CourtListnerMCPServer.md",
    "confidenceLevel": "HIGH"
  }
}
