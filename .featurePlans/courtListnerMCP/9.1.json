{
  "taskId": "9.1",
  "title": "Docker Support",
  "phase": "9",
  "phaseTitle": "Deployment & DevOps",
  "taskNumber": 1,
  "totalTasksInPhase": 2,
  "complexity": "simple",
  "objective": "Create Docker configuration for containerized deployment",

  "contextManagement": {
    "isFirstInPhase": true,
    "isLastInPhase": false,
    "requiresContextLoad": true,
    "loadContextFrom": "ingestion_phaseBoundary_phase8_20251006.md",
    "phaseBoundaryInstructions": null
  },

  "codebaseVerificationEvidence": {
    "verifiedFiles": [
      ".featurePlans/courtListnerMCP/CourtListnerMCPServer.md (lines 598-622)"
    ],
    "verifiedMethods": [],
    "assumptionAudit": {
      "assumptionLanguageDetected": false,
      "assumptionCount": 0,
      "confidence": "HIGH",
      "notes": "All specifications verified from plan document."
    }
  },

  "agentInstructions": "**OBJECTIVE**: Create Dockerfile and docker-compose.yml for containerized deployment.\n\n**EXECUTION STEPS**:\n\n1. **Create Dockerfile** (multi-stage build):\n   ```dockerfile\n   FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build\n   WORKDIR /src\n   COPY [\"CourtListener.MCP.Server/CourtListener.MCP.Server.csproj\", \"CourtListener.MCP.Server/\"]\n   RUN dotnet restore \"CourtListener.MCP.Server/CourtListener.MCP.Server.csproj\"\n   COPY . .\n   WORKDIR \"/src/CourtListener.MCP.Server\"\n   RUN dotnet build -c Release -o /app/build\n   RUN dotnet publish -c Release -o /app/publish\n   \n   FROM mcr.microsoft.com/dotnet/aspnet:9.0 AS final\n   WORKDIR /app\n   EXPOSE 8000\n   COPY --from=build /app/publish .\n   HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n     CMD curl --fail http://localhost:8000/health || exit 1\n   ENTRYPOINT [\"dotnet\", \"CourtListener.MCP.Server.dll\"]\n   ```\n\n2. **Create docker-compose.yml**:\n   ```yaml\n   version: '3.8'\n   services:\n     courtlistener-mcp:\n       build:\n         context: .\n         dockerfile: Dockerfile\n       ports:\n         - \"8000:8000\"\n       environment:\n         - COURTLISTENER_API_KEY=${COURTLISTENER_API_KEY}\n         - ASPNETCORE_ENVIRONMENT=Production\n       healthcheck:\n         test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8000/health\"]\n         interval: 30s\n         timeout: 3s\n         retries: 3\n   ```\n\n3. **Create .dockerignore**:\n   ```\n   **/bin/\n   **/obj/\n   **/out/\n   **/.vs/\n   **/.vscode/\n   ```\n\n4. **Verify**:\n   - Run: `docker build -t courtlistener-mcp .`\n   - Image builds successfully\n   - Container runs and serves requests\n\n**DELIVERABLES**:\n- Dockerfile (multi-stage)\n- docker-compose.yml\n- .dockerignore\n- Health check endpoint\n\n**VERIFICATION CHECKLIST**:\n- [ ] Dockerfile created with multi-stage build\n- [ ] docker-compose.yml created\n- [ ] .dockerignore created\n- [ ] Health check configured\n- [ ] Port 8000 exposed\n- [ ] Environment variables supported",

  "successCriteria": [
    "Docker image builds successfully",
    "Container runs and serves MCP requests",
    "Environment variables properly injected",
    "Health check endpoint responsive"
  ],

  "criticalAnchors": [
    "Match Python Docker setup patterns",
    "Use official .NET runtime images",
    "Port 8000 exposed by default"
  ],

  "associatedArtifacts": [
    {
      "type": "file",
      "path": "Dockerfile",
      "description": "Multi-stage Docker build"
    },
    {
      "type": "file",
      "path": "docker-compose.yml",
      "description": "Docker Compose configuration"
    }
  ],

  "executionControls": {
    "estimatedDuration": "15-20 minutes",
    "requiresUserInput": false,
    "canRunOffline": true,
    "requiresExternalServices": false,
    "prerequisiteTasks": ["7.1"],
    "blockedBy": [],
    "pauseBeforeExecution": false,
    "pauseAfterExecution": false
  },

  "metadata": {
    "generatedAt": "2025-10-06T19:40:00Z",
    "generatedBy": "L.E.A.S.H. Ingestion v3.2.0-git",
    "planSource": ".featurePlans/courtListnerMCP/CourtListnerMCPServer.md",
    "confidenceLevel": "HIGH"
  }
}
