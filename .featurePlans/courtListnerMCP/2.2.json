{
  "taskId": "2.2",
  "title": "Response Models and DTOs",
  "phase": "2",
  "phaseTitle": "Core Services & HTTP Client",
  "taskNumber": 2,
  "totalTasksInPhase": 2,
  "complexity": "moderate",
  "objective": "Create C# models matching CourtListener API response structures with global snake_case JSON naming policy",

  "contextManagement": {
    "isFirstInPhase": false,
    "isLastInPhase": true,
    "requiresContextLoad": false,
    "phaseBoundaryInstructions": "MANDATORY: After completing this task, create Phase 2 boundary summary and PAUSE for user approval before Phase 3"
  },

  "codebaseVerificationEvidence": {
    "verifiedFiles": [
      ".featurePlans/courtListnerMCP/CourtListnerMCPServer.md (lines 145-186)"
    ],
    "verifiedMethods": [],
    "assumptionAudit": {
      "assumptionLanguageDetected": false,
      "assumptionCount": 0,
      "confidence": "HIGH",
      "notes": "All model specifications verified from plan document. GAP #2 decision (global snake_case JSON policy) integrated with test scenarios."
    }
  },

  "agentInstructions": "**OBJECTIVE**: Create comprehensive C# models for CourtListener API responses with clean PascalCase properties and global snake_case JSON serialization.\n\n**CRITICAL CONTEXT**: This task implements GAP #2 decision - using System.Text.Json with global snake_case naming policy for clean C# code without per-property attributes.\n\n**PREREQUISITES**:\n- Task 2.1 completed (HTTP client service exists)\n- Navigate to `CourtListener.MCP.Server/Models/` directory\n\n**EXECUTION STEPS**:\n\n1. **Configure Global JSON Options**:\n   - Update `Configuration/ServiceCollectionExtensions.cs`\n   - Add method: `ConfigureJsonOptions(this IServiceCollection services)`\n   - Configuration:\n     ```csharp\n     public static IServiceCollection ConfigureJsonOptions(this IServiceCollection services)\n     {\n         services.Configure<JsonOptions>(options =>\n         {\n             options.JsonSerializerOptions.PropertyNamingPolicy = JsonNamingPolicy.SnakeCaseLower;\n             options.JsonSerializerOptions.DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull;\n             options.JsonSerializerOptions.Converters.Add(new JsonStringEnumConverter());\n         });\n\n         return services;\n     }\n     ```\n   - Also configure for HttpClient:\n     ```csharp\n     // In AddCourtListenerClient, configure JSON serialization\n     services.AddHttpClient<ICourtListenerClient, CourtListenerClient>(...)\n         .ConfigurePrimaryHttpMessageHandler(() => new HttpClientHandler())\n         .ConfigureHttpMessageHandlerBuilder(builder =>\n         {\n             // Configure JSON options for HTTP client\n         });\n     ```\n\n2. **Create Base Search Result Model**:\n   - Create file: `Models/SearchResultBase.cs`\n   - Generic class for paginated responses:\n     ```csharp\n     public class SearchResultBase<T>\n     {\n         public int Count { get; set; }\n         public string? Next { get; set; }\n         public string? Previous { get; set; }\n         public List<T> Results { get; set; } = new();\n     }\n     ```\n   - Note: Property names are PascalCase, will serialize to snake_case automatically\n\n3. **Create Entity Models Folder Structure**:\n   - Create folders:\n     - `Models/Entities/` - Core entity models\n     - `Models/Search/` - Search result models\n     - `Models/Citations/` - Citation-related models\n     - `Models/Errors/` - Error response models (GAP #4)\n   - Verify: All folders created\n\n4. **Create Core Entity Models** (Models/Entities/):\n   - **Opinion.cs**:\n     ```csharp\n     public class Opinion\n     {\n         public string? Id { get; set; }\n         public string? AbsoluteUrl { get; set; }\n         public string? Cluster { get; set; }\n         public string? Author { get; set; }\n         public string? AuthorStr { get; set; }\n         public int? PerCuriam { get; set; }\n         public string? JoinedBy { get; set; }\n         public string? Type { get; set; }\n         public string? Sha1 { get; set; }\n         public string? PageCount { get; set; }\n         public string? DownloadUrl { get; set; }\n         public string? LocalPath { get; set; }\n         public string? PlainText { get; set; }\n         public string? Html { get; set; }\n         public string? HtmlWithCitations { get; set; }\n         public string? XmlHarvard { get; set; }\n         public int? ExtractedByCitations { get; set; }\n     }\n     ```\n   - **Docket.cs**:\n     ```csharp\n     public class Docket\n     {\n         public string? Id { get; set; }\n         public string? AbsoluteUrl { get; set; }\n         public string? Court { get; set; }\n         public string? CourtId { get; set; }\n         public string? DocketNumber { get; set; }\n         public string? CaseName { get; set; }\n         public string? CaseNameShort { get; set; }\n         public string? CaseNameFull { get; set; }\n         public DateTimeOffset? DateFiled { get; set; }\n         public DateTimeOffset? DateTerminated { get; set; }\n         public DateTimeOffset? DateLastFiling { get; set; }\n         public int? AssignedTo { get; set; }\n         public string? AssignedToStr { get; set; }\n         public int? ReferredTo { get; set; }\n         public string? ReferredToStr { get; set; }\n         public string? NatureOfSuit { get; set; }\n         public string? Cause { get; set; }\n         public string? JuryDemand { get; set; }\n         public string? JurisdictionType { get; set; }\n     }\n     ```\n   - **Audio.cs**:\n     ```csharp\n     public class Audio\n     {\n         public string? Id { get; set; }\n         public string? AbsoluteUrl { get; set; }\n         public string? Panel { get; set; }\n         public string? Judges { get; set; }\n         public string? Sha1 { get; set; }\n         public DateTimeOffset? DateCreated { get; set; }\n         public DateTimeOffset? DateModified { get; set; }\n         public string? Source { get; set; }\n         public string? CaseName { get; set; }\n         public string? CaseNameShort { get; set; }\n         public string? CaseNameFull { get; set; }\n         public DateTimeOffset? DateArgued { get; set; }\n         public DateTimeOffset? DateReargued { get; set; }\n         public DateTimeOffset? DateReargumentDenied { get; set; }\n         public string? Docket { get; set; }\n         public string? LocalPathMp3 { get; set; }\n         public string? LocalPathOriginalFile { get; set; }\n         public int? Duration { get; set; }\n         public string? ProcessingComplete { get; set; }\n     }\n     ```\n   - **Person.cs**:\n     ```csharp\n     public class Person\n     {\n         public string? Id { get; set; }\n         public string? AbsoluteUrl { get; set; }\n         public string? Name { get; set; }\n         public string? NameFull { get; set; }\n         public string? NameFirst { get; set; }\n         public string? NameMiddle { get; set; }\n         public string? NameLast { get; set; }\n         public string? NameSuffix { get; set; }\n         public DateTimeOffset? DateDob { get; set; }\n         public DateTimeOffset? DateGranularity { get; set; }\n         public DateTimeOffset? DateDeath { get; set; }\n         public string? Gender { get; set; }\n         public string? Religion { get; set; }\n         public string? FtwId { get; set; }\n         public string? Slug { get; set; }\n     }\n     ```\n   - **Court.cs**:\n     ```csharp\n     public class Court\n     {\n         public string? Id { get; set; }\n         public string? AbsoluteUrl { get; set; }\n         public string? FullName { get; set; }\n         public string? ShortName { get; set; }\n         public string? Citation { get; set; }\n         public string? Jurisdiction { get; set; }\n         public DateTimeOffset? DateModified { get; set; }\n         public bool? InUse { get; set; }\n         public bool? HasOpinionScraper { get; set; }\n         public bool? HasOralArgumentScraper { get; set; }\n         public int? Position { get; set; }\n     }\n     ```\n   - **Cluster.cs**:\n     ```csharp\n     public class Cluster\n     {\n         public string? Id { get; set; }\n         public string? AbsoluteUrl { get; set; }\n         public string? Panel { get; set; }\n         public List<string>? NonParticipatingJudges { get; set; }\n         public string? Attorneys { get; set; }\n         public string? Nature { get; set; }\n         public string? Posture { get; set; }\n         public string? Syllabus { get; set; }\n         public string? HeadMatter { get; set; }\n         public string? Summary { get; set; }\n         public string? History { get; set; }\n         public string? OtherDates { get; set; }\n         public string? CrossReference { get; set; }\n         public string? Correction { get; set; }\n         public string? Citation { get; set; }\n         public int? CitationCount { get; set; }\n         public string? Precedential { get; set; }\n         public DateTimeOffset? DateFiled { get; set; }\n         public DateTimeOffset? DateFiledIsApproximate { get; set; }\n         public string? Slug { get; set; }\n         public string? CaseName { get; set; }\n         public string? CaseNameShort { get; set; }\n         public string? CaseNameFull { get; set; }\n         public string? Scdb { get; set; }\n         public string? Source { get; set; }\n         public string? Procedural { get; set; }\n         public string? Disposition { get; set; }\n         public List<string>? SubOpinions { get; set; }\n     }\n     ```\n\n5. **Create Search Result Models** (Models/Search/):\n   - **OpinionSearchResult.cs**: `SearchResultBase<Opinion>`\n   - **DocketSearchResult.cs**: `SearchResultBase<Docket>`\n   - **AudioSearchResult.cs**: `SearchResultBase<Audio>`\n   - **PersonSearchResult.cs**: `SearchResultBase<Person>`\n   - **RecapDocumentSearchResult.cs**: Create RecapDocument entity first, then search result\n\n6. **Create Citation Models** (Models/Citations/):\n   - **CitationLookupResult.cs**:\n     ```csharp\n     public class CitationLookupResult\n     {\n         public string? Citation { get; set; }\n         public List<CitationMatch>? Matches { get; set; }\n     }\n\n     public class CitationMatch\n     {\n         public string? Url { get; set; }\n         public string? CaseName { get; set; }\n         public string? Court { get; set; }\n         public int? Year { get; set; }\n     }\n     ```\n\n7. **Create Error Models** (Models/Errors/) - GAP #4:\n   - **ToolError.cs**:\n     ```csharp\n     public record ToolError(\n         string Error,\n         string Message,\n         string? Suggestion = null\n     );\n     ```\n   - **ErrorTypes.cs** (constants):\n     ```csharp\n     public static class ErrorTypes\n     {\n         public const string NotFound = \"NotFound\";\n         public const string Unauthorized = \"Unauthorized\";\n         public const string RateLimited = \"RateLimited\";\n         public const string ValidationError = \"ValidationError\";\n         public const string ApiError = \"ApiError\";\n     }\n     ```\n\n8. **Enable Nullable Reference Types**:\n   - Add to .csproj (if not already present):\n     ```xml\n     <PropertyGroup>\n       <Nullable>enable</Nullable>\n     </PropertyGroup>\n     ```\n\n9. **Verify Implementation**:\n   - Run: `dotnet build`\n   - Verify: No compilation errors\n   - Verify: All models use PascalCase property names\n   - Verify: No `[JsonPropertyName]` attributes (clean code)\n   - Verify: Global JSON options configured\n   - Verify: Nullable types used throughout\n\n**DELIVERABLES**:\n- Global JSON options with snake_case naming policy\n- SearchResultBase<T> generic class\n- 6 entity models (Opinion, Docket, Audio, Person, Court, Cluster)\n- 5 search result models\n- 2 citation models\n- 2 error models (ToolError, ErrorTypes)\n- All models use PascalCase properties (no JSON attributes)\n\n**VERIFICATION CHECKLIST**:\n- [ ] Global JsonNamingPolicy.SnakeCaseLower configured\n- [ ] SearchResultBase<T> class created\n- [ ] All 6 entity models created (Opinion, Docket, Audio, Person, Court, Cluster)\n- [ ] All models use PascalCase property names\n- [ ] No [JsonPropertyName] attributes present (clean code)\n- [ ] Nullable reference types enabled (#nullable enable)\n- [ ] DateTime fields use DateTimeOffset\n- [ ] ToolError record created for error responses\n- [ ] ErrorTypes constants class created\n- [ ] Project builds successfully",

  "successCriteria": [
    "All API response structures modeled with clean PascalCase properties",
    "JSON deserialization works correctly without per-property attributes",
    "Models match Python implementation data structures",
    "Global snake_case JSON naming policy configured",
    "Nullable reference types used throughout",
    "Test scenarios pass: snake_case API responses deserialize to PascalCase C# properties, nested objects deserialize correctly, null/missing properties handled, ISO date strings deserialize to DateTimeOffset"
  ],

  "criticalAnchors": [
    "MUST use nullable reference types (#nullable enable)",
    "MUST use System.Text.Json with global snake_case naming policy (GAP #2)",
    "NO per-property [JsonPropertyName] attributes needed (clean PascalCase properties)",
    "Global JsonNamingPolicy.SnakeCaseLower configured",
    "Automatic bidirectional conversion (API snake_case ↔ C# PascalCase)",
    "Match exact API response structure from Python version",
    "Use System.Text.Json (built into .NET 9, no extra dependencies)",
    "Use DateTimeOffset for date/time fields (proper timezone handling)",
    "ToolError record for structured error responses (GAP #4)"
  ],

  "associatedArtifacts": [
    {
      "type": "class",
      "path": "CourtListener.MCP.Server/Models/SearchResultBase.cs",
      "description": "Generic base class for paginated search results"
    },
    {
      "type": "class",
      "path": "CourtListener.MCP.Server/Models/Entities/Opinion.cs",
      "description": "Opinion entity model"
    },
    {
      "type": "class",
      "path": "CourtListener.MCP.Server/Models/Entities/Docket.cs",
      "description": "Docket entity model"
    },
    {
      "type": "class",
      "path": "CourtListener.MCP.Server/Models/Entities/Audio.cs",
      "description": "Audio entity model"
    },
    {
      "type": "class",
      "path": "CourtListener.MCP.Server/Models/Entities/Person.cs",
      "description": "Person entity model"
    },
    {
      "type": "class",
      "path": "CourtListener.MCP.Server/Models/Entities/Court.cs",
      "description": "Court entity model"
    },
    {
      "type": "class",
      "path": "CourtListener.MCP.Server/Models/Entities/Cluster.cs",
      "description": "Cluster entity model"
    },
    {
      "type": "class",
      "path": "CourtListener.MCP.Server/Models/Errors/ToolError.cs",
      "description": "Error response record (GAP #4)"
    },
    {
      "type": "class",
      "path": "CourtListener.MCP.Server/Models/Errors/ErrorTypes.cs",
      "description": "Error type constants"
    }
  ],

  "executionControls": {
    "estimatedDuration": "30-40 minutes",
    "requiresUserInput": false,
    "canRunOffline": true,
    "requiresExternalServices": false,
    "prerequisiteTasks": ["2.1"],
    "blockedBy": [],
    "pauseBeforeExecution": false,
    "pauseAfterExecution": true,
    "pauseReason": "PHASE BOUNDARY - Phase 2 complete, create boundary summary and await user approval for Phase 3"
  },

  "gapDecisionReferences": [
    {
      "gapId": "GAP #2",
      "gapTitle": "JSON Serialization Strategy",
      "decision": "System.Text.Json with Global snake_case Naming Policy",
      "implementation": "JsonNamingPolicy.SnakeCaseLower configured globally, clean PascalCase C# properties, no per-property attributes"
    },
    {
      "gapId": "GAP #4",
      "gapTitle": "MCP Tool Error Handling Strategy",
      "decision": "Structured Error Objects (Not Exceptions)",
      "implementation": "ToolError record with Error, Message, Suggestion properties; ErrorTypes constants"
    }
  ],

  "metadata": {
    "generatedAt": "2025-10-06T18:35:00Z",
    "generatedBy": "L.E.A.S.H. Ingestion v3.2.0-git",
    "planSource": ".featurePlans/courtListnerMCP/CourtListnerMCPServer.md",
    "confidenceLevel": "HIGH"
  }
}
