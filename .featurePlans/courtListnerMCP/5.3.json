{
  "taskId": "5.3",
  "title": "Enhanced Citation Tools",
  "phase": "5",
  "phaseTitle": "Citation Tools",
  "taskNumber": 3,
  "totalTasksInPhase": 3,
  "complexity": "complex",
  "objective": "Implement citation extraction and enhanced lookup combining CiteUrl.NET with CourtListener API",

  "contextManagement": {
    "isFirstInPhase": false,
    "isLastInPhase": true,
    "requiresContextLoad": false,
    "phaseBoundaryInstructions": "MANDATORY: After completing this task, create Phase 5 boundary summary and PAUSE for user approval before Phase 6"
  },

  "codebaseVerificationEvidence": {
    "verifiedFiles": [
      ".featurePlans/courtListnerMCP/CourtListnerMCPServer.md (lines 389-407)"
    ],
    "verifiedMethods": [],
    "assumptionAudit": {
      "assumptionLanguageDetected": false,
      "assumptionCount": 0,
      "confidence": "HIGH",
      "notes": "All specifications verified from plan document. **DEPENDENCY**: CiteUrl.NET library must be available."
    }
  },

  "agentInstructions": "**OBJECTIVE**: Implement advanced citation tools combining CiteUrl.NET parsing with CourtListener API lookups.\n\n**CRITICAL DEPENDENCY**: This task requires CiteUrl.NET library to be available (same as Task 5.2).\n- **If unavailable**: Create stub implementations with TODO comments\n\n**PREREQUISITES**:\n- Tasks 5.1 and 5.2 completed (CitationTools.cs with basic lookup and parsing)\n- CiteUrl.NET library available (or stubs created in 5.2)\n- Navigate to `CourtListener.MCP.Server/Tools/CitationTools.cs`\n\n**EXECUTION STEPS**:\n\n1. **Implement ExtractCitationsFromText Method** (if CiteUrl.NET available):\n   - Add to CitationTools.cs\n   - Method signature:\n     ```csharp\n     [McpServerTool]\n     [Description(\"Extract all citations from a text block using CiteUrl.NET YAML templates\")]\n     public async Task<object> ExtractCitationsFromText(\n         [Description(\"Text block to extract citations from\")] string text,\n         CancellationToken cancellationToken = default\n     )\n     ```\n   - Input validation:\n     ```csharp\n     if (string.IsNullOrWhiteSpace(text))\n     {\n         return new ToolError(\n             ErrorTypes.ValidationError,\n             \"Text cannot be empty\"\n         );\n     }\n     ```\n   - Use CiteUrl.NET Citator.list_cites() method:\n     ```csharp\n     try\n     {\n         var citator = new Citator();\n         var citations = citator.ListCites(text);\n         \n         if (citations == null || citations.Count == 0)\n         {\n             return new\n             {\n                 Text = text.Substring(0, Math.Min(100, text.Length)) + \"...\",\n                 CitationsFound = 0,\n                 Citations = new List<object>()\n             };\n         }\n         \n         var results = citations.Select(cite => new\n         {\n             Citation = cite.Text,\n             Volume = cite.Volume,\n             Reporter = cite.Reporter,\n             Page = cite.Page,\n             Position = cite.Position,\n             Type = cite.Type\n         }).ToList();\n         \n         _logger.LogInformation(\n             \"Extracted {Count} citations from text\",\n             results.Count\n         );\n         \n         return new\n         {\n             Text = text.Substring(0, Math.Min(100, text.Length)) + \"...\",\n             CitationsFound = results.Count,\n             Citations = results\n         };\n     }\n     catch (Exception ex)\n     {\n         _logger.LogError(ex, \"Error extracting citations from text\");\n         return new ToolError(\n             ErrorTypes.ApiError,\n             $\"Extraction error: {ex.Message}\"\n         );\n     }\n     ```\n   - Extract all citations from text using YAML templates\n   - Return list of found citations with full parsing\n   - Support 130+ legal source types\n\n2. **Implement EnhancedCitationLookup Method** (if CiteUrl.NET available):\n   - Add to CitationTools.cs\n   - Method signature:\n     ```csharp\n     [McpServerTool]\n     [Description(\"Enhanced citation lookup combining CiteUrl.NET validation with CourtListener API data\")]\n     public async Task<object> EnhancedCitationLookup(\n         [Description(\"Citation to look up\")] string citation,\n         CancellationToken cancellationToken = default\n     )\n     ```\n   - Input validation (same as above)\n   - Combine CiteUrl.NET format validation with CourtListener API lookup:\n     ```csharp\n     try\n     {\n         // Step 1: Validate and parse with CiteUrl.NET\n         var citator = new Citator();\n         var parsed = citator.Cite(citation);\n         var template = Template.FindMatchingTemplate(citation);\n         \n         // Step 2: Lookup in CourtListener API\n         var formData = new Dictionary<string, string>\n         {\n             { \"text\", citation }\n         };\n         \n         var apiResult = await _client.PostFormAsync<CitationLookupResult>(\n             \"/citation-lookup/\",\n             formData,\n             cancellationToken\n         );\n         \n         // Step 3: Combine results\n         return new\n         {\n             Citation = citation,\n             Validation = new\n             {\n                 IsValid = template != null,\n                 Format = template?.Name,\n                 Source = template?.Source\n             },\n             Parsed = parsed != null ? new\n             {\n                 Volume = parsed.Volume,\n                 Reporter = parsed.Reporter,\n                 Page = parsed.Page,\n                 Pincite = parsed.Pincite\n             } : null,\n             CourtListenerData = apiResult\n         };\n     }\n     catch (Exception ex)\n     {\n         _logger.LogError(ex, \"Error in enhanced citation lookup: {Citation}\", citation);\n         return new ToolError(\n             ErrorTypes.ApiError,\n             $\"Lookup error: {ex.Message}\"\n         );\n     }\n     ```\n   - Return comprehensive citation information (format + case data)\n   - Combines local validation with API case data\n\n3. **Stub Implementations** (if CiteUrl.NET NOT available):\n   ```csharp\n   [McpServerTool]\n   [Description(\"Extract all citations from text (STUB - CiteUrl.NET not available)\")]\n   public Task<object> ExtractCitationsFromText(\n       [Description(\"Text block to extract citations from\")] string text,\n       CancellationToken cancellationToken = default\n   )\n   {\n       // TODO: Implement when CiteUrl.NET library is available\n       return Task.FromResult<object>(new ToolError(\n           ErrorTypes.ApiError,\n           \"CiteUrl.NET library not available\",\n           \"This feature requires the CiteUrl.NET library to be installed\"\n       ));\n   }\n   \n   [McpServerTool]\n   [Description(\"Enhanced citation lookup (STUB - CiteUrl.NET not available)\")]\n   public Task<object> EnhancedCitationLookup(\n       [Description(\"Citation to look up\")] string citation,\n       CancellationToken cancellationToken = default\n   )\n   {\n       // TODO: Implement when CiteUrl.NET library is available\n       return Task.FromResult<object>(new ToolError(\n           ErrorTypes.ApiError,\n           \"CiteUrl.NET library not available\",\n           \"This feature requires the CiteUrl.NET library to be installed\"\n       ));\n   }\n   ```\n\n4. **Structured Logging**:\n   - Log extraction attempts with text length\n   - Log citations found count\n   - Log enhanced lookup steps\n   - Log errors with context\n\n5. **Verify Implementation**:\n   - Run: `dotnet build`\n   - If CiteUrl.NET available:\n     - Verify: Text extraction finds all citations\n     - Verify: Enhanced lookup combines validation + API data\n     - Verify: Full feature parity with Python implementation\n   - If CiteUrl.NET NOT available:\n     - Verify: Stub implementations compile\n     - Verify: Stubs return appropriate error messages\n\n**DELIVERABLES**:\n- `ExtractCitationsFromText` method (full or stub)\n- `EnhancedCitationLookup` method (full or stub)\n- Text extraction with 130+ legal sources (if CiteUrl.NET available)\n- Combined validation + API lookup (if CiteUrl.NET available)\n- Error handling and logging\n\n**VERIFICATION CHECKLIST**:\n- [ ] ExtractCitationsFromText method added to CitationTools.cs\n- [ ] EnhancedCitationLookup method added to CitationTools.cs\n- [ ] Both methods have [McpServerTool] attribute\n- [ ] Both methods have [Description] attributes\n- [ ] Input validation (text/citation not empty)\n- [ ] If CiteUrl.NET available:\n  - [ ] Citator.ListCites() used for extraction\n  - [ ] Returns all found citations with parsing\n  - [ ] Enhanced lookup combines CiteUrl.NET + API\n  - [ ] Returns validation, parsed, and API data\n- [ ] If CiteUrl.NET NOT available:\n  - [ ] Stub implementations return ToolError\n  - [ ] Error message indicates library unavailable\n  - [ ] TODO comments present\n- [ ] Structured logging with context\n- [ ] Project builds successfully\n- [ ] Total citation tools: 6 (Lookup, Batch, Verify, Parse, Extract, Enhanced)",

  "successCriteria": [
    "Text extraction finds all citations (130+ legal source types) if CiteUrl.NET available",
    "Enhanced lookup provides combined data (format + case info) if CiteUrl.NET available",
    "Full feature parity with Python implementation if CiteUrl.NET available",
    "Graceful fallback if CiteUrl.NET unavailable (stubs with error messages)"
  ],

  "criticalAnchors": [
    "MUST use CiteUrl.NET Citator.ListCites() for extraction (if available)",
    "MUST combine CiteUrl.NET validation with CourtListener API (if available)",
    "DEPENDENCY: CiteUrl.NET must be available (or stubs created)",
    "Tool names MUST be PascalCase: ExtractCitationsFromText, EnhancedCitationLookup",
    "Enhanced lookup MUST return: validation + parsed + API data",
    "MUST return ToolError for unavailable library (not throw exceptions)",
    "Full Bluebook-style citation support (130+ sources) if CiteUrl.NET available"
  ],

  "associatedArtifacts": [
    {
      "type": "method",
      "path": "CourtListener.MCP.Server/Tools/CitationTools.cs",
      "description": "ExtractCitationsFromText method (full or stub)"
    },
    {
      "type": "method",
      "path": "CourtListener.MCP.Server/Tools/CitationTools.cs",
      "description": "EnhancedCitationLookup method (full or stub)"
    }
  ],

  "executionControls": {
    "estimatedDuration": "25-35 minutes (if CiteUrl.NET available), 5-10 minutes (stubs only)",
    "requiresUserInput": false,
    "canRunOffline": true,
    "requiresExternalServices": false,
    "prerequisiteTasks": ["5.1", "5.2"],
    "blockedBy": ["CiteUrl.NET library availability"],
    "pauseBeforeExecution": false,
    "pauseAfterExecution": true,
    "pauseReason": "PHASE BOUNDARY - Phase 5 complete, create boundary summary and await user approval for Phase 6"
  },

  "gapDecisionReferences": [
    {
      "gapId": "GAP #7",
      "gapTitle": "Citation Parsing Strategy",
      "decision": "Port Python citeurl to .NET as CiteUrl.NET",
      "implementation": "Separate project; Tasks 5.2 and 5.3 depend on its availability; stubs created if unavailable"
    }
  ],

  "metadata": {
    "generatedAt": "2025-10-06T19:10:00Z",
    "generatedBy": "L.E.A.S.H. Ingestion v3.2.0-git",
    "planSource": ".featurePlans/courtListnerMCP/CourtListnerMCPServer.md",
    "confidenceLevel": "HIGH"
  }
}
